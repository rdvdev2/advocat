#!/usr/bin/python

import os
from glob import glob
from argparse import ArgumentParser

from ninja_syntax import Writer

COMPILER = "g++"
APP_VERSION = "2.2"

def write_generator_header(w):
    w.newline()
    w.comment("This file was autogenerated by configure.py")
    w.comment("DON'T manually modify this file, as it will be overwritten!")
    w.newline()
    w.newline()

def write_build_vars(w, ninja_required_version, src_dir, dest_dir):
    w.variable("ninja_required_version", "1.3")
    w.variable("srcdir", "src")
    w.variable("builddir", "build")
    w.newline()

def write_compilers_and_flags(w, compiler, cxx_flags, ld_flags):
    w.comment("COMPILERS AND FLAGS")
    w.variable("cxx_compiler", compiler)
    w.variable("cxx_flags", cxx_flags)
    w.variable("ld_flags", "-O2 -Wall -Wextra -Werror -Wno-sign-compare -Wshadow")
    w.newline()

def write_build_rules(w):
    w.comment("RULES")
    w.rule("cxx", "$cxx_compiler -MD -MF $out.d $cxx_flags -c $in -o $out", description="CXX $out <- $in", depfile="$out.d", deps="gcc")
    w.rule("ld", "$cxx_compiler $ld_flags $in -o $out", description="LD $out <- $in")
    w.rule("cp", "cp $in $out", description="CP $out <- $in")
    w.newline()

def build_object_file(w, sources):
    inputs = "$srcdir/" + sources[4:]
    outputs = "$builddir/" + sources[4:len(sources)-3] + ".o"
    w.build(outputs, "cxx", inputs)
    return outputs

def build_linked_binary(w, sources, binary):
    w.build("$builddir/" + binary, "ld", sources)

def build_binary(w, sources, binary):
    w.comment("C++ compiling")
    objects = list()
    for source in glob("src/cpp/" + sources):
        objects.append(build_object_file(w, source))
    w.newline()

    w.comment("C++ linking")
    build_linked_binary(w, objects, binary)

    w.newline()
    return "$builddir/" + binary

def build_template(w, template):
    inputs = "$srcdir/" + template[4:]
    outputs = "$builddir/" + template[4:]
    w.build(outputs, "cp", inputs)
    return outputs

def write_builds(w):
    w.comment("BUILDS")
    
    assemble_targets = [build_binary(w, "*.cc", "advocat")]

    w.comment("C++ templates")
    for template in glob("src/templates/*.cc.in"):
        build_template(w, template)
    w.newline()

    w.comment("Assemble target")
    w.build("assemble", "phony", assemble_targets)
    w.default("assemble")

    w.newline()
    return assemble_targets

def write_install_vars(w, install_dir):
    w.variable("installdir", install_dir)
    w.newline()

def write_install_rules(w):
    w.comment("Rules")
    w.rule("install_binary", "install -T -D -s --mode=u+rwx $in $out", description="INSTALL $out <- $in")
    w.rule("install_file", "install -T -D --mode=u+rw $in $out", description="INSTALL $out <- $in")
    w.newline()

def write_install_targets(w, targets):
    w.comment("Individual file targets")
    install_targets = ["assemble"]

    for target in targets:
        inputs = target
        outputs = "$installdir/" + target[10:]

        if target.endswith(".cc.in"):
            w.build(outputs, "install_file", inputs)
        else:
            w.build(outputs, "install_binary", inputs)

        install_targets.append(outputs)
    w.newline()

    w.comment("Install target")
    w.build("install", "phony", install_targets)

def main():
    parser = ArgumentParser()
    parser.add_argument(
        "-I", "--install-dir",
        required=False,
        dest="install-dir",
        default=os.getenv("HOME") + "/.advocat/program",
        help="Where to install the program (defaults to $HOME/.advocat/program)")
    parser.add_argument(
        "--debug",
        required=False,
        dest="debug",
        action="store_true",
        help="Enable debug messages on the compiled binary (Really verbose!)"
    )
    args = vars(parser.parse_args())

    compiler = os.popen("which " + COMPILER).read()
    flags = "-O2 -Wall -Wextra -Werror -Wno-sign-compare -Wshadow"
    cxx_flags = flags + " -DAPP_VERSION=\"\\\"" + APP_VERSION + "\"\\\""
    if args["debug"]:
        cxx_flags += " -DADVOCAT_DEBUG"
    ld_flags = flags

    with open('build.ninja', 'w') as f:
        w = Writer(f)

        write_generator_header(w)
        write_build_vars(w, "1.3", "src", "build")
        write_compilers_and_flags(w, compiler, cxx_flags, ld_flags)
        write_build_rules(w)
        targets = write_builds(w)
        
        w.newline()
        w.comment("INSTALLATION PROCEDURE")
        write_install_vars(w, args["install-dir"])
        write_install_rules(w)
        write_install_targets(w, targets)

        

if __name__ == "__main__":
    main()
