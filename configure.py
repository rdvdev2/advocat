#!/usr/bin/python

import os
import re
from glob import glob
from argparse import ArgumentParser

from ninja_syntax import Writer

COMPILER = "g++"
APP_VERSION = "2.0"

INCLUDES_REGEX = re.compile('#include\s+"(.*)"')

def main():
    parser = ArgumentParser()
    parser.add_argument(
        "-I", "--install-dir",
        required=False,
        dest="install-dir",
        default=os.getenv("HOME") + "/.advocat/program",
        help="Where to install the program (defaults to $HOME/.advocat/program)")
    args = vars(parser.parse_args())

    with open('build.ninja', 'w') as f:
        w = Writer(f)

        w.newline()
        w.comment("This file was autogenerated by configure.py")
        w.comment("DON'T manually modify this file, as it will be overwritten!")
        w.newline()
        w.newline()

        w.variable("ninja_required_version", "1.2")
        w.variable("srcdir", "src")
        w.variable("templatesdir", "templates")
        w.variable("builddir", "build")
        w.newline()

        compiler = os.popen("which " + COMPILER).read()
        w.comment("Compilers and flags")
        w.variable("cxx_compiler", compiler)
        w.variable("cxx_flags", "-O2 -Wall -Wextra -Werror -Wno-sign-compare -Wshadow -DAPP_VERSION=\"\\\"" + APP_VERSION + "\"\\\"")
        w.variable("ld_flags", "-O2 -Wall -Wextra -Werror -Wno-sign-compare -Wshadow")
        w.newline()

        w.comment("Rules")
        w.rule("cxx", "$cxx_compiler $cxx_flags -c $in -o $out", description="CXX $out <- $in")
        w.rule("ld", "$cxx_compiler $ld_flags $in -o $out", description="LD $out <- $in")
        w.rule("cp", "cp $in $out", description="CP $out <- $in")
        w.newline()

        w.comment("Builds")
        objects = list()
        for file in glob("src/*.cc"):
            inputs = "$srcdir/" + file[4:]
            outputs = "$builddir/" + file[4:len(file)-3] + ".o"
            
            implicit = []
            source_file = open(file, "r")
            matches = INCLUDES_REGEX.findall(source_file.read())
            source_file.close()
            for match in matches:
                implicit.append("$srcdir/" + match)

            w.build(outputs, "cxx", inputs, implicit)
            objects.append(outputs)
        
        w.newline()
        w.build("$builddir/advocat", "ld", objects)
        assemble_targets = ["$builddir/advocat"]

        w.newline()
        for file in glob("templates/*.cc.in"):
            inputs = "$templatesdir/" + file[10:]
            outputs = "$builddir/" + file[10:]
            w.build(outputs, "cp", inputs)
            assemble_targets.append(outputs)

        w.newline()
        w.build("assemble", "phony", assemble_targets)
        w.default("assemble")

        w.newline()
        w.newline()
        w.comment("Installation procedure")
        w.variable("installdir", args["install-dir"])
        w.newline()

        w.rule("install_binary", "install -T -D -s --mode=u+rwx $in $out", description="INSTALL $out <- $in")
        w.rule("install_file", "install -T -D --mode=u+rw $in $out", description="INSTALL $out <- $in")
        w.newline()

        install_targets = ["assemble"]
        for target in assemble_targets:
            inputs = target
            outputs = "$installdir/" + target[10:]

            if target.endswith(".cc.in"):
                w.build(outputs, "install_file", inputs)
            else:
                w.build(outputs, "install_binary", inputs)

            install_targets.append(outputs)
        
        w.newline()
        w.build("install", "phony", install_targets)

if __name__ == "__main__":
    main()